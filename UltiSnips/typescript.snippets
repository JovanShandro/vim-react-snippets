# React & TSX
snippet trrcc "Typescript React Redux Class Component" b
import React, { Component } from 'react';
import { connect } from 'react-redux';
import styles from './${2:$1}.css';

interface Props {
}

interface State {
}

class ${1:`!v expand('%:t:r')`} extends Component<Props, State> {

	constructor(props: Props) {
		super(props);
	}

	render() {
		return (
			<div>
				$3
			</div>
		);
	}
}

function mapStateToProps(state) {
	return {};
}

export default connect(mapStateToProps)($1);
endsnippet

snippet trcc "Typescript React Class Component" b
import React, { Component } from 'react';
import styles from './$1.css';

interface Props {
	${3}
}

interface State {
	${4}
}

class ${1:`!v expand('%:t:r')`} extends Component<Props, State> {

	constructor(props: Props) {
		super(props);
	}

	render() {
		return (
			<div>
				${2}
			</div>
		);
	}
}

export default $1;
endsnippet

snippet trfc "React Typescript Functional Component" b
import React from 'react';
import './$1.css';

interface Props {
}

const ${1:`!v expand('%:t:r')`}: React.FC<Props> = ({ ${2} }) => {
	return (
		<${3:div}>
			${4}
		</$3>
	);
}

export default $1;
endsnippet

snippet rsc "React Styled Component" b
import styled from 'styled-components';

const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
	$3
\`;

export default $1;
endsnippet

snippet rsci "React Styled Component Interpolation" b
import styled, { css } from 'styled-components';

const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`${props => css\`
	${3:${props.$4 && \`
		$5
	\`}}
\`}\`;

export default $1;
endsnippet

snippet pp "Get Props"
${props => props.${1}};
endsnippet

snippet cn "className"
className="$1"
endsnippet

snippet dp "Default Props" b
${1:`!v expand('%:t:r')`.}defaultProps = {
	$2
};
endsnippet

snippet set "Set State"
this.setState({
	${1}: ${2}
});
endsnippet

snippet props "Get Property" i
this.props.${1}
endsnippet

snippet state "Get State" i
this.state.${1}
endsnippet

snippet ref "Ref" i
ref={${1:ref} => { this.${2:name} = $1; }}
endsnippet


# Component Lifecycle
snippet cwm "Component Will Mount" b
UNSAFE_componentWillMount() {
	$1
}
endsnippet

snippet cdm "Component Did Mount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "Component Will Receive Props" b
UNSAFE_componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scup "Should Component Update" b
shouldComponentUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cwup "Component Will Update" b
UNSAFE_componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdup "Component Did Update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwu "Component Will Unmount" b
componentWillUnmount() {
	$1
}
endsnippet

snippet ren "Render"
render() {
	return ${1:(
		${2:<div>${3}</div>}
	);}
}
endsnippet

snippet uses "useState" w
const [$1, set${1/\w+\s*/\u$0/g}] = useState(${3:''})${0:;}
endsnippet

snippet usee "useEffect" w
useEffect(() => {
  $1
})${0:;}
endsnippet

snippet useer "useEffect with return" w
useEffect(() => {
  $1
	return () => {
    $2
	};
})${0:;}
endsnippet

snippet usec "useContext" w
const $1 = useContext($2)${0:;}
endsnippet

snippet user "useReducer" w
const [$1, dispatch] = useReducer($1Reducer, ${2:${VISUAL:initialState}})
const $1Reducer = (state, action) => {
	switch (action.type) {
		default:
			return state;
	}
}${0:;}
endsnippet

snippet usecb "useCallback" w
useCallback(
	() => {
		$1
	},
	[$2],
)${0:;}
endsnippet

snippet usem "useMemo" w
const $1 = useMemo(() => {
	$2
}, [$3])${0:;}
endsnippet

snippet userf "useRef" w
const $1 = useRef($2)${0:;}
endsnippet

snippet usesel "useSelector" w
const $1 = useSelector((store) => (
	store.$2
));
endsnippet

snippet used "useDispatch" w
const dispatch = useDispatch();
endsnippet
